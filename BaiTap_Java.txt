1. Biến và kiểu dữ liệu
Bài tập 1: Khai báo các biến kiểu int, double, String, và boolean. Gán giá trị cho từng biến và in ra màn hình.
Bài tập 2: Viết chương trình thực hiện các phép toán cơ bản (cộng, trừ, nhân, chia) với hai số nguyên và hai số thực. Hiển thị kết quả ra màn hình.
Bài tập 3: Thực hiện chuyển đổi kiểu dữ liệu:
Chuyển một số từ int sang double.
Chuyển một chuỗi số (ví dụ: "123") sang int bằng Integer.parseInt().
Chuyển một số double sang String bằng String.valueOf().

2. Cấu trúc điều kiện
Bài tập 1: Viết chương trình nhận một số nguyên từ người dùng và dùng if-else để kiểm tra xem số đó là chẵn hay lẻ.
Bài tập 2: Sử dụng switch-case để nhận một số từ 1 đến 7 và in ra ngày tương ứng trong tuần (1 - Chủ Nhật, 2 - Thứ Hai, ...).
Bài tập 3: Viết chương trình nhận điểm của ba môn học, tính điểm trung bình và xếp loại học lực (Giỏi: >= 8, Khá: >= 6.5, Trung bình: >= 5, Yếu: < 5).

3. Vòng lặp
Bài tập 1: Sử dụng vòng lặp for để in bảng cửu chương của một số do người dùng nhập.
Bài tập 2: Dùng vòng lặp while để tính tổng các số từ 1 đến n, với n là số nguyên dương nhập từ bàn phím.
Bài tập 3: Áp dụng do-while để yêu cầu người dùng nhập một số nguyên dương. Nếu nhập sai (số âm hoặc không phải số), yêu cầu nhập lại cho đến khi đúng.

4. Mảng và danh sách
Bài tập 1: Khai báo một mảng 1 chiều chứa 5 số nguyên. Tính tổng và trung bình các phần tử trong mảng.
Bài tập 2: Tạo một mảng 2 chiều (ma trận 3x3), nhập giá trị và in các phần tử theo dạng bảng.
Bài tập 3: Sử dụng ArrayList để lưu trữ danh sách tên sinh viên. Thực hiện các thao tác:
Thêm 3 tên vào danh sách.
Xóa một tên bất kỳ.
Sửa một tên đã có.
Tìm kiếm một tên trong danh sách.

5. Lập trình hướng đối tượng (OOP)
Bài tập 1: Tạo lớp Person với thuộc tính name (chuỗi) và age (số nguyên), cùng phương thức introduce() để in thông tin cá nhân.
Bài tập 2: Tạo lớp Student kế thừa từ Person, thêm thuộc tính studentID (mã sinh viên) và ghi đè phương thức introduce() để hiển thị thêm mã sinh viên.
Bài tập 3: Tạo lớp BankAccount với thuộc tính balance (số dư) là private. Sử dụng các phương thức public như deposit() (nạp tiền) và withdraw() (rút tiền) để thao tác với số dư.

6. Xử lý ngoại lệ
Bài tập 1: Viết chương trình nhận hai số nguyên và thực hiện phép chia. Sử dụng try-catch để bắt và xử lý lỗi khi chia cho 0.
Bài tập 2: Tạo một ngoại lệ tùy chỉnh InvalidAgeException. Viết chương trình kiểm tra tuổi nhập vào, nếu tuổi < 0 hoặc > 150 thì ném ngoại lệ này.

7. I/O và file
Bài tập 1: Viết chương trình đọc nội dung từ một file văn bản có sẵn và in ra màn hình.
Bài tập 2: Sử dụng BufferedWriter để ghi danh sách 5 tên sinh viên vào file, mỗi tên trên một dòng.	
Bài tập 3: Đọc một file chứa các số nguyên (mỗi số trên một dòng), tính tổng và ghi kết quả vào một file khác.

8. Collections Framework
Bài tập 1: Sử dụng HashSet để lưu trữ các số nguyên nhập từ bàn phím (ít nhất 5 số, có trùng lặp) và in ra danh sách không trùng lặp.
Bài tập 2: Tạo HashMap để lưu trữ thông tin sinh viên theo cặp mã sinh viên (key) và tên (value). Thực hiện tra cứu tên dựa trên mã nhập từ bàn phíhsm.
Bài tập 3: Tạo một ArrayList chứa 10 số nguyên, sử dụng vòng lặp để thêm phần tử và tính tổng các số trong danh sách.

9. Multithreading 
Bài tập 1: Tạo hai luồng (thread): một luồng in các số chẵn từ 1 đến 100, luồng còn lại in các số lẻ từ 1 đến 100.
Bài tập 2: Tạo một biến chung và hai luồng cùng tăng giá trị biến đó. Sử dụng synchronized để đảm bảo không xảy ra xung đột.

10. Lambda và Stream API
Bài tập 1: Sử dụng lambda expression để sắp xếp một danh sách tên (ít nhất 5 tên) theo thứ tự alphabet.
Bài tập 2: Tạo một ArrayList chứa 10 số nguyên, dùng Stream API để lọc các số chẵn và tính tổng chúng.
Bài tập 3: Tạo một danh sách chuỗi (ví dụ: ["java", "core", "programming"]), dùng Stream API để chuyển tất cả thành chữ in hoa.
